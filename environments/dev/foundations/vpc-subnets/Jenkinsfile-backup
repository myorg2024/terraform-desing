pipeline{
    agent any
    environment {
       PATH = "${PATH}:${getTerraformPath()}"
    }
    tools {
       terraform "Terraform1.4.0"
    }
    stages{
        stage('Git Checkout'){
            steps{
                git branch: 'master', credentialsId: 'jenkins-example-github-pat', url: 'git@github.com:myorg2024/terraform-desing.git'
            }
        }
        stage('Terraform Init'){
            steps{
                dir("${env.WORKSPACE}/dev/foundations/vpc-subnets/"){
                    sh "terraform init -reconfigure"
                }
            }
        }
        stage('Terraform Plan'){
            steps{
                dir("${env.WORKSPACE}/dev/foundations/vpc-subnets/"){
                sh 'terraform plan'
                }
            }
        }
        stage('Terraform apply'){
            steps{
                dir("${env.WORKSPACE}/dev/foundations/vpc-subnets/"){
                    timeout(time:5, unit:'DAYS'){
                    input message:'Approve PRODUCTION Deployment?'
                    sh 'terraform apply --auto-approve'
                    }
                }
            }
        }
    
        
        stage('Terraform Destroy'){
            steps{
                dir("${env.WORKSPACE}/dev/foundations/vpc-subnets/"){
                    timeout(time:5, unit:'DAYS'){
                    input message:'Approve PRODUCTION Deployment Destroy?'
                    sh 'terraform destroy --auto-approve'
                    }
                }
            }
        }
    }
}
        
            

   
def getTerraformPath(){ 
    def tfHome = tool name: 'terraform v1.3.2', type: 'terraform'
    return tfHome
}